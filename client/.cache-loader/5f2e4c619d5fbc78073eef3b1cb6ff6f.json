{"remainingRequest":"/Users/daikiterai/Desktop/learnReactJS/client/node_modules/thread-loader/dist/cjs.js??ref--4-1!/Users/daikiterai/Desktop/learnReactJS/client/node_modules/babel-loader/lib/index.js??ref--4-2!/Users/daikiterai/Desktop/learnReactJS/client/src/reducer/user.js","dependencies":[{"path":"/Users/daikiterai/Desktop/learnReactJS/client/src/reducer/user.js","mtime":1542677022391},{"path":"/Users/daikiterai/Desktop/learnReactJS/client/node_modules/cache-loader/dist/cjs.js","mtime":1543145130559},{"path":"/Users/daikiterai/Desktop/learnReactJS/client/node_modules/thread-loader/dist/cjs.js","mtime":1539057923244},{"path":"/Users/daikiterai/Desktop/learnReactJS/client/node_modules/babel-loader/lib/index.js","mtime":1539057922793}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.promise\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n// reducerで受け取るaction名を定義\nvar LOAD = 'user/LOAD';\nvar ADD = 'user/ADD'; // 初期化オブジェクト\n\nvar initialState = {\n  users: null // reducerの定義（dispatch時にコールバックされる）\n\n};\nexport default function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  // actionの種別に応じてstateを更新する\n  switch (action.type) {\n    case LOAD:\n      // ユーザ一覧取得\n      return {\n        users: state.users ? state.users : action.results\n      };\n\n    case ADD:\n      // ユーザ一覧末尾にユーザを追加する\n      return {\n        users: state.users ? _toConsumableArray(state.users).concat([action.results]) : [action.results]\n      };\n\n    default:\n      // 初期化時はここに来る（initialStateのオブジェクトが返却される）\n      return state;\n  }\n} // actionの定義\n\nexport function load() {\n  // ユーザ一覧を取得\n  return function (dispatch, getState, client) {\n    return client.get('https://randomuser.me/api').then(function (res) {\n      return res.data;\n    }).then(function (data) {\n      var results = data.results; // dispatchしてreducer呼び出し\n\n      dispatch({\n        type: LOAD,\n        results: results\n      });\n    });\n  };\n}\nexport function add(user) {\n  // 入力ユーザを追加\n  return function (dispatch) {\n    // 疑似ユーザ作成（本来はサーバ送信＆DB保存）\n    var data = {\n      'results': [{\n        'gender': user.gender,\n        'name': {\n          'first': user.firstname,\n          'last': user.lastname\n        },\n        'email': user.email,\n        'picture': {\n          'thumbnail': 'https://avatars1.githubusercontent.com/u/771218?s=460&v=4'\n        }\n      }]\n    };\n    var results = data.results[0]; // dispatchしてreducer呼び出し\n\n    dispatch({\n      type: ADD,\n      results: results\n    });\n    return Promise.resolve();\n  };\n}",{"version":3,"sources":["/Users/daikiterai/Desktop/learnReactJS/client/src/reducer/user.js"],"names":["LOAD","ADD","initialState","users","reducer","state","action","type","results","load","dispatch","getState","client","get","then","res","data","add","user","gender","firstname","lastname","email","Promise","resolve"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA,IAAMA,IAAI,GAAG,WAAb;AACA,IAAMC,GAAG,GAAG,UAAZ,C,CAEA;;AACA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY,CAIrB;;AAJqB,CAArB;AAKA,eAAe,SAASC,OAAT,GAAoD;AAAA,MAAnCC,KAAmC,uEAA3BH,YAA2B;AAAA,MAAbI,MAAa,uEAAJ,EAAI;;AACjE;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,IAAL;AACE;AACA,aAAO;AACLG,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAcE,KAAK,CAACF,KAApB,GAA4BG,MAAM,CAACE;AADrC,OAAP;;AAGF,SAAKP,GAAL;AACE;AACA,aAAO;AACLE,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,sBAAkBE,KAAK,CAACF,KAAxB,UAA+BG,MAAM,CAACE,OAAtC,KAAiD,CAACF,MAAM,CAACE,OAAR;AADnD,OAAP;;AAGF;AACE;AACA,aAAOH,KAAP;AAbJ;AAeD,C,CAED;;AACA,OAAO,SAASI,IAAT,GAAgB;AACrB;AACA,SAAO,UAACC,QAAD,EAAWC,QAAX,EAAqBC,MAArB,EAAgC;AACrC,WAAOA,MAAM,CACVC,GADI,CACA,2BADA,EAEJC,IAFI,CAEC,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAR;AAAA,KAFJ,EAGJF,IAHI,CAGC,UAAAE,IAAI,EAAI;AACZ,UAAMR,OAAO,GAAGQ,IAAI,CAACR,OAArB,CADY,CAEZ;;AACAE,MAAAA,QAAQ,CAAC;AAAEH,QAAAA,IAAI,EAAEP,IAAR;AAAcQ,QAAAA,OAAO,EAAPA;AAAd,OAAD,CAAR;AACD,KAPI,CAAP;AAQD,GATD;AAUD;AAED,OAAO,SAASS,GAAT,CAAaC,IAAb,EAAmB;AACxB;AACA,SAAO,UAACR,QAAD,EAAc;AACnB;AACA,QAAMM,IAAI,GAAG;AAAC,iBAAW,CAAC;AAAC,kBAAUE,IAAI,CAACC,MAAhB;AAAwB,gBAAQ;AAAC,mBAASD,IAAI,CAACE,SAAf;AAA0B,kBAAQF,IAAI,CAACG;AAAvC,SAAhC;AAAkF,iBAASH,IAAI,CAACI,KAAhG;AAAuG,mBAAW;AAAC,uBAAa;AAAd;AAAlH,OAAD;AAAZ,KAAb;AACA,QAAMd,OAAO,GAAGQ,IAAI,CAACR,OAAL,CAAa,CAAb,CAAhB,CAHmB,CAInB;;AACAE,IAAAA,QAAQ,CAAC;AAAEH,MAAAA,IAAI,EAAEN,GAAR;AAAaO,MAAAA,OAAO,EAAPA;AAAb,KAAD,CAAR;AACA,WAAOe,OAAO,CAACC,OAAR,EAAP;AACD,GAPD;AAQD","sourcesContent":["// reducerで受け取るaction名を定義\nconst LOAD = 'user/LOAD'\nconst ADD = 'user/ADD'\n\n// 初期化オブジェクト\nconst initialState = {\n  users: null,\n}\n\n// reducerの定義（dispatch時にコールバックされる）\nexport default function reducer(state = initialState, action = {}) {\n  // actionの種別に応じてstateを更新する\n  switch (action.type) {\n    case LOAD:\n      // ユーザ一覧取得\n      return {\n        users: state.users ? state.users : action.results,\n      }\n    case ADD:\n      // ユーザ一覧末尾にユーザを追加する\n      return {\n        users: state.users ? [...state.users, action.results] : [action.results],\n      }\n    default:\n      // 初期化時はここに来る（initialStateのオブジェクトが返却される）\n      return state\n  }\n}\n\n// actionの定義\nexport function load() {\n  // ユーザ一覧を取得\n  return (dispatch, getState, client) => {\n    return client\n      .get('https://randomuser.me/api')\n      .then(res => res.data)\n      .then(data => {\n        const results = data.results\n        // dispatchしてreducer呼び出し\n        dispatch({ type: LOAD, results })\n      })\n  }\n}\n\nexport function add(user) {\n  // 入力ユーザを追加\n  return (dispatch) => {\n    // 疑似ユーザ作成（本来はサーバ送信＆DB保存）\n    const data = {'results': [{'gender': user.gender, 'name': {'first': user.firstname, 'last': user.lastname}, 'email': user.email, 'picture': {'thumbnail': 'https://avatars1.githubusercontent.com/u/771218?s=460&v=4'}}]}\n    const results = data.results[0]\n    // dispatchしてreducer呼び出し\n    dispatch({ type: ADD, results })\n    return Promise.resolve()\n  }\n}"]}]}